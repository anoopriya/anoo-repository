HBC Microservice Template
=================================

This Scala Play app template aims to be used the base template used by the developer community at HBC Digital.

Feel free to run the steps below in order to bootstrap your brand new microservice.

#Steps to start a new Microservice

- Clone this project:

      ```sh
      git clone https://github.com/saksdirect/hbc-microservice-template.git
      ```
- Run the setup.sh script inside this repo (Works in Mac OSX only at the moment):

      ```sh
      cd hbc-microservice-template
      ./setup.sh
      ```
- Give this microservice a name. The script will perform a search & replace to change all "hbc-microservice-template" to the name you have provided. NOTE: the name should conform to our current naming scheme (lowercase words, separated by dashes):

      ```sh
      Please enter service name:
      lookahead-service
      ```
- Finally, change out of the current directory, as it has been renamed.

      ```sh
      cd ..
      ```

#Features supported

- Docker image (TBD - Still needs to be tested)
  - Readme, Dockerfile, and scripts can be found under docker directory

- Vagrant
  - Vagrantfile is in root of project
  - Puppet provisioning is in puppet directory
  - To get started:
    - Install [Homebrew](https://github.com/saksdirect/HBCPlatformDocs/tree/master/gettingStarted/backendDevWorkstation#install-homebrew)
    - Install Ruby (**Macs already have Ruby installed**) -
      - https://github.com/saksdirect/HBCPlatformDocs/tree/master/gettingStarted/backendDevWorkstation#ruby-setup
    - If you encounter permission issues, install RVM -
      https://github.com/saksdirect/HBCPlatformDocs/tree/master/gettingStarted/backendDevWorkstation#ruby-setup
      - Verify **Ruby 2.2.1** is set
    - Install [Vagrant](https://github.com/saksdirect/HBCPlatformDocs/tree/master/gettingStarted/backendDevWorkstation#vagrant-setup)
    - Install Vagrant Puppet-Install plugin  
      ```sh
      vagrant plugin install vagrant-puppet-install
      ```
    - Install Vagrant Librarian-Puppet plugin (version 0.9.0)  
      ```sh
      vagrant plugin install vagrant-librarian-puppet --plugin-version 0.9.0
      ```
      
- Logging
  - Based on embedded Play logging support (Logback)
  - [logging](https://www.playframework.com/documentation/2.3.x/SettingsLogger)
  - Change logging settings by modifying file conf/logger.xml
  - Logs are at logs/hbc-microservice-template.log
  - You can change the log level at runtime by hitting the endpoint:
    - /hbc-microservice-template/logLevel/DEBUG (possible values = ALL|TRACE|DEBUG|INFO|WARN|ERROR|OFF)

- Metrics (TBD - Still needs to be thoroughly tested)
  - Based on [metrics](https://github.com/saksdirect/metrics) project 
  - Turned into a scala trait, StatsDClient, and associated classes
  - Embedded with the template
  - Provides Counters, Gauges and Metrics

- Health check page
    Health check pages are under the endpoint path **/admin/[???]**

    These are the supported endpoint:

 - Ping
    When called the endpoit **/admin/ping** the response should **pong**
    
 - JVM stats
    When called the endpoint **/admin/jvmstats** the response should be a JSON payload with the JVM stats as showed below:
    
    ```sh
{
  "jvm_num_cpus" : 4.0,
  "jvm_current_mem_Code Cache_max" : 50331648,
  "jvm_post_gc_PS Old Gen_max" : 7.1565312E+8,
  "jvm_post_gc_PS Eden Space_used" : 0.0,
  "jvm_fd_limit" : 10240.0,
  "jvm_current_mem_PS Survivor Space_used" : 45259984,
  "jvm_thread_count" : 40.0,
  "jvm_post_gc_PS Perm Gen_used" : 106023416,
  "jvm_classes_total_unloaded" : 14152.0,
  "jvm_current_mem_PS Eden Space_max" : 239599616,
  "jvm_current_mem_PS Old Gen_max" : 7.1565312E+8,
  "jvm_nonheap_max" : 5.8720256E+8,
  "jvm_buffer_direct_count" : 19.0,
  "jvm_buffer_mapped_used" : 0.0,
  "jvm_buffer_direct_max" : 627712.0,
  "jvm_current_mem_PS Old Gen_used" : 197647536,
  "jvm_classes_current_loaded" : 22564.0,
  "jvm_start_time" : 1432235806864,
  "jvm_current_mem_Code Cache_used" : 1.839776E+7,
  "jvm_buffer_mapped_count" : 0.0,
  "jvm_post_gc_PS Survivor Space_max" : 45613056,
  "jvm_buffer_direct_used" : 627712.0,
  "jvm_thread_peak_count" : 42.0,
  "jvm_current_mem_used" : 527369496,
  "jvm_post_gc_PS Eden Space_max" : 239599616,
  "jvm_post_gc_used" : 276579328,
  "jvm_current_mem_PS Perm Gen_used" : 134804432,
  "jvm_uptime" : 70355031,
  "jvm_heap_committed" : 495976448,
  "jvm_compilation_time_msec" : 96308.0,
  "jvm_current_mem_PS Eden Space_used" : 131259784,
  "jvm_classes_total_loaded" : 36716.0,
  "jvm_current_mem_PS Survivor Space_max" : 45613056,
  "jvm_buffer_mapped_max" : 0.0,
  "jvm_thread_daemon_count" : 9.0,
  "jvm_heap_max" : 954728448,
  "jvm_post_gc_PS Old Gen_used" : 125295928,
  "jvm_fd_count" : 354.0,
  "jvm_post_gc_PS Perm Gen_max" : 536870912,
  "jvm_heap_used" : 374167304,
  "jvm_post_gc_PS Survivor Space_used" : 45259984,
  "jvm_nonheap_used" : 153191056,
  "jvm_current_mem_PS Perm Gen_max" : 536870912,
  "jvm_nonheap_committed" : 238354432
}
    ```
 
 - Build version (TBD)

- HTTP fail over and timeout handling (TBD)

- IDE support

Navigate to the root project directory and call sbt

 - Intellij
   When you are on sbt console, call **gen-ide**
  
 - Eclipse
   When you are on sbt console, call **eclipse**

All project dependencies will be download and the configuration files will be created

####Links to More information
- Vagrant
  - http://docs.vagrantup.com/v2/getting-started/index.html
- Puppet
  - http://docs.puppetlabs.com/puppet/
  - https://puppetlabs.com/download-learning-vm
- Librarian puppet
  - https://github.com/rodjek/librarian-puppet/blob/master/README.md
